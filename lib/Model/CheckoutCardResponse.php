<?php
/**
 * CheckoutCardResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * CheckoutCardResponse Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutCardResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutCardResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'primary_account_number' => 'string',
        'pan_expiration_month' => 'string',
        'pan_expiration_year' => 'string',
        'cardholder_full_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'primary_account_number' => null,
        'pan_expiration_month' => null,
        'pan_expiration_year' => null,
        'cardholder_full_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'primary_account_number' => false,
		'pan_expiration_month' => false,
		'pan_expiration_year' => false,
		'cardholder_full_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'primary_account_number' => 'primaryAccountNumber',
        'pan_expiration_month' => 'panExpirationMonth',
        'pan_expiration_year' => 'panExpirationYear',
        'cardholder_full_name' => 'cardholderFullName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'primary_account_number' => 'setPrimaryAccountNumber',
        'pan_expiration_month' => 'setPanExpirationMonth',
        'pan_expiration_year' => 'setPanExpirationYear',
        'cardholder_full_name' => 'setCardholderFullName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'primary_account_number' => 'getPrimaryAccountNumber',
        'pan_expiration_month' => 'getPanExpirationMonth',
        'pan_expiration_year' => 'getPanExpirationYear',
        'cardholder_full_name' => 'getCardholderFullName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('primary_account_number', $data ?? [], null);
        $this->setIfExists('pan_expiration_month', $data ?? [], null);
        $this->setIfExists('pan_expiration_year', $data ?? [], null);
        $this->setIfExists('cardholder_full_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['primary_account_number'] === null) {
            $invalidProperties[] = "'primary_account_number' can't be null";
        }
        if ((mb_strlen($this->container['primary_account_number']) > 19)) {
            $invalidProperties[] = "invalid value for 'primary_account_number', the character length must be smaller than or equal to 19.";
        }

        if ((mb_strlen($this->container['primary_account_number']) < 9)) {
            $invalidProperties[] = "invalid value for 'primary_account_number', the character length must be bigger than or equal to 9.";
        }

        if (!is_null($this->container['pan_expiration_month']) && (mb_strlen($this->container['pan_expiration_month']) > 2)) {
            $invalidProperties[] = "invalid value for 'pan_expiration_month', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['pan_expiration_year']) && (mb_strlen($this->container['pan_expiration_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'pan_expiration_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cardholder_full_name']) && (mb_strlen($this->container['cardholder_full_name']) > 100)) {
            $invalidProperties[] = "invalid value for 'cardholder_full_name', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets primary_account_number
     *
     * @return string
     */
    public function getPrimaryAccountNumber()
    {
        return $this->container['primary_account_number'];
    }

    /**
     * Sets primary_account_number
     *
     * @param string $primary_account_number Primary Account Number. A variable length, ISO/IEC 7812-compliant account number that is generated within account ranges associated with a BIN by a Card Issuer.
     *
     * @return self
     */
    public function setPrimaryAccountNumber($primary_account_number)
    {
        if (is_null($primary_account_number)) {
            throw new \InvalidArgumentException('non-nullable primary_account_number cannot be null');
        }
        if ((mb_strlen($primary_account_number) > 19)) {
            throw new \InvalidArgumentException('invalid length for $primary_account_number when calling CheckoutCardResponse., must be smaller than or equal to 19.');
        }
        if ((mb_strlen($primary_account_number) < 9)) {
            throw new \InvalidArgumentException('invalid length for $primary_account_number when calling CheckoutCardResponse., must be bigger than or equal to 9.');
        }

        $this->container['primary_account_number'] = $primary_account_number;

        return $this;
    }

    /**
     * Gets pan_expiration_month
     *
     * @return string|null
     */
    public function getPanExpirationMonth()
    {
        return $this->container['pan_expiration_month'];
    }

    /**
     * Sets pan_expiration_month
     *
     * @param string|null $pan_expiration_month Expiration month of the Card, expressed as a two-digit calendar month
     *
     * @return self
     */
    public function setPanExpirationMonth($pan_expiration_month)
    {
        if (is_null($pan_expiration_month)) {
            throw new \InvalidArgumentException('non-nullable pan_expiration_month cannot be null');
        }
        if ((mb_strlen($pan_expiration_month) > 2)) {
            throw new \InvalidArgumentException('invalid length for $pan_expiration_month when calling CheckoutCardResponse., must be smaller than or equal to 2.');
        }

        $this->container['pan_expiration_month'] = $pan_expiration_month;

        return $this;
    }

    /**
     * Gets pan_expiration_year
     *
     * @return string|null
     */
    public function getPanExpirationYear()
    {
        return $this->container['pan_expiration_year'];
    }

    /**
     * Sets pan_expiration_year
     *
     * @param string|null $pan_expiration_year Expiration year of the Card, expressed as a four-digit calendar year
     *
     * @return self
     */
    public function setPanExpirationYear($pan_expiration_year)
    {
        if (is_null($pan_expiration_year)) {
            throw new \InvalidArgumentException('non-nullable pan_expiration_year cannot be null');
        }
        if ((mb_strlen($pan_expiration_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $pan_expiration_year when calling CheckoutCardResponse., must be smaller than or equal to 4.');
        }

        $this->container['pan_expiration_year'] = $pan_expiration_year;

        return $this;
    }

    /**
     * Gets cardholder_full_name
     *
     * @return string|null
     */
    public function getCardholderFullName()
    {
        return $this->container['cardholder_full_name'];
    }

    /**
     * Sets cardholder_full_name
     *
     * @param string|null $cardholder_full_name Cardholder Name
     *
     * @return self
     */
    public function setCardholderFullName($cardholder_full_name)
    {
        if (is_null($cardholder_full_name)) {
            throw new \InvalidArgumentException('non-nullable cardholder_full_name cannot be null');
        }
        if ((mb_strlen($cardholder_full_name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $cardholder_full_name when calling CheckoutCardResponse., must be smaller than or equal to 100.');
        }

        $this->container['cardholder_full_name'] = $cardholder_full_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


