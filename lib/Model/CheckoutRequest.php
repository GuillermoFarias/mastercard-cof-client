<?php
/**
 * CheckoutRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * CheckoutRequest Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'src_dpa_id' => 'string',
        'merchant_account_id' => 'string',
        'correlation_id' => 'string',
        'checkout_type' => '\MastercardApiClient\Model\CheckoutType',
        'checkout_reference' => '\MastercardApiClient\Model\CheckoutReference',
        'dpa_transaction_options' => '\MastercardApiClient\Model\DpaTransactionOptions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'src_dpa_id' => null,
        'merchant_account_id' => null,
        'correlation_id' => null,
        'checkout_type' => null,
        'checkout_reference' => null,
        'dpa_transaction_options' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'src_dpa_id' => false,
		'merchant_account_id' => false,
		'correlation_id' => false,
		'checkout_type' => false,
		'checkout_reference' => false,
		'dpa_transaction_options' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'src_dpa_id' => 'srcDpaId',
        'merchant_account_id' => 'merchantAccountId',
        'correlation_id' => 'correlationId',
        'checkout_type' => 'checkoutType',
        'checkout_reference' => 'checkoutReference',
        'dpa_transaction_options' => 'dpaTransactionOptions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'src_dpa_id' => 'setSrcDpaId',
        'merchant_account_id' => 'setMerchantAccountId',
        'correlation_id' => 'setCorrelationId',
        'checkout_type' => 'setCheckoutType',
        'checkout_reference' => 'setCheckoutReference',
        'dpa_transaction_options' => 'setDpaTransactionOptions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'src_dpa_id' => 'getSrcDpaId',
        'merchant_account_id' => 'getMerchantAccountId',
        'correlation_id' => 'getCorrelationId',
        'checkout_type' => 'getCheckoutType',
        'checkout_reference' => 'getCheckoutReference',
        'dpa_transaction_options' => 'getDpaTransactionOptions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('src_dpa_id', $data ?? [], null);
        $this->setIfExists('merchant_account_id', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('checkout_type', $data ?? [], null);
        $this->setIfExists('checkout_reference', $data ?? [], null);
        $this->setIfExists('dpa_transaction_options', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['src_dpa_id'] === null) {
            $invalidProperties[] = "'src_dpa_id' can't be null";
        }
        if ($this->container['checkout_type'] === null) {
            $invalidProperties[] = "'checkout_type' can't be null";
        }
        if ($this->container['checkout_reference'] === null) {
            $invalidProperties[] = "'checkout_reference' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets src_dpa_id
     *
     * @return string
     */
    public function getSrcDpaId()
    {
        return $this->container['src_dpa_id'];
    }

    /**
     * Sets src_dpa_id
     *
     * @param string $src_dpa_id Client ID. This is the DPA ID of the merchant.
     *
     * @return self
     */
    public function setSrcDpaId($src_dpa_id)
    {
        if (is_null($src_dpa_id)) {
            throw new \InvalidArgumentException('non-nullable src_dpa_id cannot be null');
        }
        $this->container['src_dpa_id'] = $src_dpa_id;

        return $this;
    }

    /**
     * Gets merchant_account_id
     *
     * @return string|null
     */
    public function getMerchantAccountId()
    {
        return $this->container['merchant_account_id'];
    }

    /**
     * Sets merchant_account_id
     *
     * @param string|null $merchant_account_id Merchant issued Account ID for a consumer. It serves as an integration check. It must be provided, if Merchant is using a Saved card and had specified the same during the SaveCOF operation.
     *
     * @return self
     */
    public function setMerchantAccountId($merchant_account_id)
    {
        if (is_null($merchant_account_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_account_id cannot be null');
        }
        $this->container['merchant_account_id'] = $merchant_account_id;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string|null
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string|null $correlation_id Correlation ID for this transaction. If available within the present checkout session (e.g. received in an earlier API response during the present session), then it must be provided, otherwise a new checkout session will be initiated.
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets checkout_type
     *
     * @return \MastercardApiClient\Model\CheckoutType
     */
    public function getCheckoutType()
    {
        return $this->container['checkout_type'];
    }

    /**
     * Sets checkout_type
     *
     * @param \MastercardApiClient\Model\CheckoutType $checkout_type checkout_type
     *
     * @return self
     */
    public function setCheckoutType($checkout_type)
    {
        if (is_null($checkout_type)) {
            throw new \InvalidArgumentException('non-nullable checkout_type cannot be null');
        }
        $this->container['checkout_type'] = $checkout_type;

        return $this;
    }

    /**
     * Gets checkout_reference
     *
     * @return \MastercardApiClient\Model\CheckoutReference
     */
    public function getCheckoutReference()
    {
        return $this->container['checkout_reference'];
    }

    /**
     * Sets checkout_reference
     *
     * @param \MastercardApiClient\Model\CheckoutReference $checkout_reference checkout_reference
     *
     * @return self
     */
    public function setCheckoutReference($checkout_reference)
    {
        if (is_null($checkout_reference)) {
            throw new \InvalidArgumentException('non-nullable checkout_reference cannot be null');
        }
        $this->container['checkout_reference'] = $checkout_reference;

        return $this;
    }

    /**
     * Gets dpa_transaction_options
     *
     * @return \MastercardApiClient\Model\DpaTransactionOptions|null
     */
    public function getDpaTransactionOptions()
    {
        return $this->container['dpa_transaction_options'];
    }

    /**
     * Sets dpa_transaction_options
     *
     * @param \MastercardApiClient\Model\DpaTransactionOptions|null $dpa_transaction_options dpa_transaction_options
     *
     * @return self
     */
    public function setDpaTransactionOptions($dpa_transaction_options)
    {
        if (is_null($dpa_transaction_options)) {
            throw new \InvalidArgumentException('non-nullable dpa_transaction_options cannot be null');
        }
        $this->container['dpa_transaction_options'] = $dpa_transaction_options;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


