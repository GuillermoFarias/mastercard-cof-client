<?php
/**
 * CheckoutResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * CheckoutResponse Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_transaction_id' => 'string',
        'encrypted_payload' => '\MastercardApiClient\Model\CheckoutEncryptedPayload',
        'correlation_id' => 'string',
        'merchant_card_id' => 'string',
        'assurance_data' => '\MastercardApiClient\Model\AssuranceData',
        'masked_card' => '\MastercardApiClient\Model\CheckoutMaskedCard',
        'masked_consumer' => '\MastercardApiClient\Model\CheckoutMaskedConsumer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_transaction_id' => null,
        'encrypted_payload' => null,
        'correlation_id' => null,
        'merchant_card_id' => null,
        'assurance_data' => null,
        'masked_card' => null,
        'masked_consumer' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'merchant_transaction_id' => false,
		'encrypted_payload' => false,
		'correlation_id' => false,
		'merchant_card_id' => false,
		'assurance_data' => false,
		'masked_card' => false,
		'masked_consumer' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_transaction_id' => 'merchantTransactionId',
        'encrypted_payload' => 'encryptedPayload',
        'correlation_id' => 'correlationId',
        'merchant_card_id' => 'merchantCardId',
        'assurance_data' => 'assuranceData',
        'masked_card' => 'maskedCard',
        'masked_consumer' => 'maskedConsumer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_transaction_id' => 'setMerchantTransactionId',
        'encrypted_payload' => 'setEncryptedPayload',
        'correlation_id' => 'setCorrelationId',
        'merchant_card_id' => 'setMerchantCardId',
        'assurance_data' => 'setAssuranceData',
        'masked_card' => 'setMaskedCard',
        'masked_consumer' => 'setMaskedConsumer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_transaction_id' => 'getMerchantTransactionId',
        'encrypted_payload' => 'getEncryptedPayload',
        'correlation_id' => 'getCorrelationId',
        'merchant_card_id' => 'getMerchantCardId',
        'assurance_data' => 'getAssuranceData',
        'masked_card' => 'getMaskedCard',
        'masked_consumer' => 'getMaskedConsumer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('merchant_transaction_id', $data ?? [], null);
        $this->setIfExists('encrypted_payload', $data ?? [], null);
        $this->setIfExists('correlation_id', $data ?? [], null);
        $this->setIfExists('merchant_card_id', $data ?? [], null);
        $this->setIfExists('assurance_data', $data ?? [], null);
        $this->setIfExists('masked_card', $data ?? [], null);
        $this->setIfExists('masked_consumer', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_transaction_id'] === null) {
            $invalidProperties[] = "'merchant_transaction_id' can't be null";
        }
        if ($this->container['encrypted_payload'] === null) {
            $invalidProperties[] = "'encrypted_payload' can't be null";
        }
        if ($this->container['correlation_id'] === null) {
            $invalidProperties[] = "'correlation_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_transaction_id
     *
     * @return string
     */
    public function getMerchantTransactionId()
    {
        return $this->container['merchant_transaction_id'];
    }

    /**
     * Sets merchant_transaction_id
     *
     * @param string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment.
     *
     * @return self
     */
    public function setMerchantTransactionId($merchant_transaction_id)
    {
        if (is_null($merchant_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_transaction_id cannot be null');
        }
        $this->container['merchant_transaction_id'] = $merchant_transaction_id;

        return $this;
    }

    /**
     * Gets encrypted_payload
     *
     * @return \MastercardApiClient\Model\CheckoutEncryptedPayload
     */
    public function getEncryptedPayload()
    {
        return $this->container['encrypted_payload'];
    }

    /**
     * Sets encrypted_payload
     *
     * @param \MastercardApiClient\Model\CheckoutEncryptedPayload $encrypted_payload encrypted_payload
     *
     * @return self
     */
    public function setEncryptedPayload($encrypted_payload)
    {
        if (is_null($encrypted_payload)) {
            throw new \InvalidArgumentException('non-nullable encrypted_payload cannot be null');
        }
        $this->container['encrypted_payload'] = $encrypted_payload;

        return $this;
    }

    /**
     * Gets correlation_id
     *
     * @return string
     */
    public function getCorrelationId()
    {
        return $this->container['correlation_id'];
    }

    /**
     * Sets correlation_id
     *
     * @param string $correlation_id Correlation ID.
     *
     * @return self
     */
    public function setCorrelationId($correlation_id)
    {
        if (is_null($correlation_id)) {
            throw new \InvalidArgumentException('non-nullable correlation_id cannot be null');
        }
        $this->container['correlation_id'] = $correlation_id;

        return $this;
    }

    /**
     * Gets merchant_card_id
     *
     * @return string|null
     */
    public function getMerchantCardId()
    {
        return $this->container['merchant_card_id'];
    }

    /**
     * Sets merchant_card_id
     *
     * @param string|null $merchant_card_id Merchant card identifer.
     *
     * @return self
     */
    public function setMerchantCardId($merchant_card_id)
    {
        if (is_null($merchant_card_id)) {
            throw new \InvalidArgumentException('non-nullable merchant_card_id cannot be null');
        }
        $this->container['merchant_card_id'] = $merchant_card_id;

        return $this;
    }

    /**
     * Gets assurance_data
     *
     * @return \MastercardApiClient\Model\AssuranceData|null
     */
    public function getAssuranceData()
    {
        return $this->container['assurance_data'];
    }

    /**
     * Sets assurance_data
     *
     * @param \MastercardApiClient\Model\AssuranceData|null $assurance_data assurance_data
     *
     * @return self
     */
    public function setAssuranceData($assurance_data)
    {
        if (is_null($assurance_data)) {
            throw new \InvalidArgumentException('non-nullable assurance_data cannot be null');
        }
        $this->container['assurance_data'] = $assurance_data;

        return $this;
    }

    /**
     * Gets masked_card
     *
     * @return \MastercardApiClient\Model\CheckoutMaskedCard|null
     */
    public function getMaskedCard()
    {
        return $this->container['masked_card'];
    }

    /**
     * Sets masked_card
     *
     * @param \MastercardApiClient\Model\CheckoutMaskedCard|null $masked_card masked_card
     *
     * @return self
     */
    public function setMaskedCard($masked_card)
    {
        if (is_null($masked_card)) {
            throw new \InvalidArgumentException('non-nullable masked_card cannot be null');
        }
        $this->container['masked_card'] = $masked_card;

        return $this;
    }

    /**
     * Gets masked_consumer
     *
     * @return \MastercardApiClient\Model\CheckoutMaskedConsumer|null
     */
    public function getMaskedConsumer()
    {
        return $this->container['masked_consumer'];
    }

    /**
     * Sets masked_consumer
     *
     * @param \MastercardApiClient\Model\CheckoutMaskedConsumer|null $masked_consumer masked_consumer
     *
     * @return self
     */
    public function setMaskedConsumer($masked_consumer)
    {
        if (is_null($masked_consumer)) {
            throw new \InvalidArgumentException('non-nullable masked_consumer cannot be null');
        }
        $this->container['masked_consumer'] = $masked_consumer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


