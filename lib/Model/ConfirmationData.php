<?php
/**
 * ConfirmationData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * ConfirmationData Class Doc Comment
 *
 * @category Class
 * @description Confirmation data for transaction.
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConfirmationData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConfirmationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'checkout_event_type' => 'string',
        'checkout_event_status' => 'string',
        'confirmation_status' => 'string',
        'confirmation_reason' => 'string',
        'confirmation_timestamp' => 'string',
        'network_authorization_code' => 'string',
        'network_transaction_identifier' => 'string',
        'payment_network_reference' => 'string',
        'transaction_amount' => '\MastercardApiClient\Model\TransactionAmount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'checkout_event_type' => null,
        'checkout_event_status' => null,
        'confirmation_status' => null,
        'confirmation_reason' => null,
        'confirmation_timestamp' => null,
        'network_authorization_code' => null,
        'network_transaction_identifier' => null,
        'payment_network_reference' => null,
        'transaction_amount' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'checkout_event_type' => false,
		'checkout_event_status' => false,
		'confirmation_status' => false,
		'confirmation_reason' => false,
		'confirmation_timestamp' => false,
		'network_authorization_code' => false,
		'network_transaction_identifier' => false,
		'payment_network_reference' => false,
		'transaction_amount' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'checkout_event_type' => 'checkoutEventType',
        'checkout_event_status' => 'checkoutEventStatus',
        'confirmation_status' => 'confirmationStatus',
        'confirmation_reason' => 'confirmationReason',
        'confirmation_timestamp' => 'confirmationTimestamp',
        'network_authorization_code' => 'networkAuthorizationCode',
        'network_transaction_identifier' => 'networkTransactionIdentifier',
        'payment_network_reference' => 'paymentNetworkReference',
        'transaction_amount' => 'transactionAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'checkout_event_type' => 'setCheckoutEventType',
        'checkout_event_status' => 'setCheckoutEventStatus',
        'confirmation_status' => 'setConfirmationStatus',
        'confirmation_reason' => 'setConfirmationReason',
        'confirmation_timestamp' => 'setConfirmationTimestamp',
        'network_authorization_code' => 'setNetworkAuthorizationCode',
        'network_transaction_identifier' => 'setNetworkTransactionIdentifier',
        'payment_network_reference' => 'setPaymentNetworkReference',
        'transaction_amount' => 'setTransactionAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'checkout_event_type' => 'getCheckoutEventType',
        'checkout_event_status' => 'getCheckoutEventStatus',
        'confirmation_status' => 'getConfirmationStatus',
        'confirmation_reason' => 'getConfirmationReason',
        'confirmation_timestamp' => 'getConfirmationTimestamp',
        'network_authorization_code' => 'getNetworkAuthorizationCode',
        'network_transaction_identifier' => 'getNetworkTransactionIdentifier',
        'payment_network_reference' => 'getPaymentNetworkReference',
        'transaction_amount' => 'getTransactionAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('checkout_event_type', $data ?? [], null);
        $this->setIfExists('checkout_event_status', $data ?? [], null);
        $this->setIfExists('confirmation_status', $data ?? [], null);
        $this->setIfExists('confirmation_reason', $data ?? [], null);
        $this->setIfExists('confirmation_timestamp', $data ?? [], null);
        $this->setIfExists('network_authorization_code', $data ?? [], null);
        $this->setIfExists('network_transaction_identifier', $data ?? [], null);
        $this->setIfExists('payment_network_reference', $data ?? [], null);
        $this->setIfExists('transaction_amount', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['checkout_event_type']) && (mb_strlen($this->container['checkout_event_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'checkout_event_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['checkout_event_status']) && (mb_strlen($this->container['checkout_event_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'checkout_event_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['confirmation_status']) && (mb_strlen($this->container['confirmation_status']) > 2)) {
            $invalidProperties[] = "invalid value for 'confirmation_status', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['confirmation_reason']) && (mb_strlen($this->container['confirmation_reason']) > 64)) {
            $invalidProperties[] = "invalid value for 'confirmation_reason', the character length must be smaller than or equal to 64.";
        }

        if (!is_null($this->container['network_authorization_code']) && (mb_strlen($this->container['network_authorization_code']) > 25)) {
            $invalidProperties[] = "invalid value for 'network_authorization_code', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['network_transaction_identifier']) && (mb_strlen($this->container['network_transaction_identifier']) > 25)) {
            $invalidProperties[] = "invalid value for 'network_transaction_identifier', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['payment_network_reference']) && (mb_strlen($this->container['payment_network_reference']) > 25)) {
            $invalidProperties[] = "invalid value for 'payment_network_reference', the character length must be smaller than or equal to 25.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets checkout_event_type
     *
     * @return string|null
     */
    public function getCheckoutEventType()
    {
        return $this->container['checkout_event_type'];
    }

    /**
     * Sets checkout_event_type
     *
     * @param string|null $checkout_event_type Event type associated with the update. Valid values are:    * 01 - Authorise   * 02 - Capture   * 03 - Refund   * 04 - Cancel   * 05 - Fraud   * 06 - Chargeback   * 07 - Other
     *
     * @return self
     */
    public function setCheckoutEventType($checkout_event_type)
    {
        if (is_null($checkout_event_type)) {
            throw new \InvalidArgumentException('non-nullable checkout_event_type cannot be null');
        }
        if ((mb_strlen($checkout_event_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $checkout_event_type when calling ConfirmationData., must be smaller than or equal to 2.');
        }

        $this->container['checkout_event_type'] = $checkout_event_type;

        return $this;
    }

    /**
     * Gets checkout_event_status
     *
     * @return string|null
     */
    public function getCheckoutEventStatus()
    {
        return $this->container['checkout_event_status'];
    }

    /**
     * Sets checkout_event_status
     *
     * @param string|null $checkout_event_status Event type associated with the order. Valid values are:    * 01 - Created   * 02 - Confirmed   * 03 - Cancelled   * 04 - Fraud Cancelled   * 05 - Others   * 06-50 - EMVCo future use   * 51-99 - SRC System specific
     *
     * @return self
     */
    public function setCheckoutEventStatus($checkout_event_status)
    {
        if (is_null($checkout_event_status)) {
            throw new \InvalidArgumentException('non-nullable checkout_event_status cannot be null');
        }
        if ((mb_strlen($checkout_event_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $checkout_event_status when calling ConfirmationData., must be smaller than or equal to 2.');
        }

        $this->container['checkout_event_status'] = $checkout_event_status;

        return $this;
    }

    /**
     * Gets confirmation_status
     *
     * @return string|null
     */
    public function getConfirmationStatus()
    {
        return $this->container['confirmation_status'];
    }

    /**
     * Sets confirmation_status
     *
     * @param string|null $confirmation_status Status of the event as provided by the SRC Initiator in the Confirmation message. Valid values are:    * 01 - Success   * 02 - Failure   * 03 - Other
     *
     * @return self
     */
    public function setConfirmationStatus($confirmation_status)
    {
        if (is_null($confirmation_status)) {
            throw new \InvalidArgumentException('non-nullable confirmation_status cannot be null');
        }
        if ((mb_strlen($confirmation_status) > 2)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_status when calling ConfirmationData., must be smaller than or equal to 2.');
        }

        $this->container['confirmation_status'] = $confirmation_status;

        return $this;
    }

    /**
     * Gets confirmation_reason
     *
     * @return string|null
     */
    public function getConfirmationReason()
    {
        return $this->container['confirmation_reason'];
    }

    /**
     * Sets confirmation_reason
     *
     * @param string|null $confirmation_reason Description of the reason for the event associated with the order.
     *
     * @return self
     */
    public function setConfirmationReason($confirmation_reason)
    {
        if (is_null($confirmation_reason)) {
            throw new \InvalidArgumentException('non-nullable confirmation_reason cannot be null');
        }
        if ((mb_strlen($confirmation_reason) > 64)) {
            throw new \InvalidArgumentException('invalid length for $confirmation_reason when calling ConfirmationData., must be smaller than or equal to 64.');
        }

        $this->container['confirmation_reason'] = $confirmation_reason;

        return $this;
    }

    /**
     * Gets confirmation_timestamp
     *
     * @return string|null
     */
    public function getConfirmationTimestamp()
    {
        return $this->container['confirmation_timestamp'];
    }

    /**
     * Sets confirmation_timestamp
     *
     * @param string|null $confirmation_timestamp Date and time of the event completion corresponding to the Confirmation event by the SRC Initiator.
     *
     * @return self
     */
    public function setConfirmationTimestamp($confirmation_timestamp)
    {
        if (is_null($confirmation_timestamp)) {
            throw new \InvalidArgumentException('non-nullable confirmation_timestamp cannot be null');
        }
        $this->container['confirmation_timestamp'] = $confirmation_timestamp;

        return $this;
    }

    /**
     * Gets network_authorization_code
     *
     * @return string|null
     */
    public function getNetworkAuthorizationCode()
    {
        return $this->container['network_authorization_code'];
    }

    /**
     * Sets network_authorization_code
     *
     * @param string|null $network_authorization_code Authorisation code associated with an approved transaction.
     *
     * @return self
     */
    public function setNetworkAuthorizationCode($network_authorization_code)
    {
        if (is_null($network_authorization_code)) {
            throw new \InvalidArgumentException('non-nullable network_authorization_code cannot be null');
        }
        if ((mb_strlen($network_authorization_code) > 25)) {
            throw new \InvalidArgumentException('invalid length for $network_authorization_code when calling ConfirmationData., must be smaller than or equal to 25.');
        }

        $this->container['network_authorization_code'] = $network_authorization_code;

        return $this;
    }

    /**
     * Gets network_transaction_identifier
     *
     * @return string|null
     */
    public function getNetworkTransactionIdentifier()
    {
        return $this->container['network_transaction_identifier'];
    }

    /**
     * Sets network_transaction_identifier
     *
     * @param string|null $network_transaction_identifier Unique authorisation related tracing value assigned by a Payment Network and provided in an authorisation response.
     *
     * @return self
     */
    public function setNetworkTransactionIdentifier($network_transaction_identifier)
    {
        if (is_null($network_transaction_identifier)) {
            throw new \InvalidArgumentException('non-nullable network_transaction_identifier cannot be null');
        }
        if ((mb_strlen($network_transaction_identifier) > 25)) {
            throw new \InvalidArgumentException('invalid length for $network_transaction_identifier when calling ConfirmationData., must be smaller than or equal to 25.');
        }

        $this->container['network_transaction_identifier'] = $network_transaction_identifier;

        return $this;
    }

    /**
     * Gets payment_network_reference
     *
     * @return string|null
     */
    public function getPaymentNetworkReference()
    {
        return $this->container['payment_network_reference'];
    }

    /**
     * Sets payment_network_reference
     *
     * @param string|null $payment_network_reference Transaction identifier as provided by a Payment Network after authorisation has been complete.
     *
     * @return self
     */
    public function setPaymentNetworkReference($payment_network_reference)
    {
        if (is_null($payment_network_reference)) {
            throw new \InvalidArgumentException('non-nullable payment_network_reference cannot be null');
        }
        if ((mb_strlen($payment_network_reference) > 25)) {
            throw new \InvalidArgumentException('invalid length for $payment_network_reference when calling ConfirmationData., must be smaller than or equal to 25.');
        }

        $this->container['payment_network_reference'] = $payment_network_reference;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \MastercardApiClient\Model\TransactionAmount|null
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \MastercardApiClient\Model\TransactionAmount|null $transaction_amount transaction_amount
     *
     * @return self
     */
    public function setTransactionAmount($transaction_amount)
    {
        if (is_null($transaction_amount)) {
            throw new \InvalidArgumentException('non-nullable transaction_amount cannot be null');
        }
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


