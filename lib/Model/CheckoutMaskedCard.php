<?php
/**
 * CheckoutMaskedCard
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * CheckoutMaskedCard Class Doc Comment
 *
 * @category Class
 * @description Masked card saved on file.
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CheckoutMaskedCard implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CheckoutMaskedCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'src_digital_card_id' => 'string',
        'pan_bin' => 'string',
        'pan_last_four' => 'string',
        'digital_card_data' => '\MastercardApiClient\Model\CheckoutDigitalCardData',
        'pan_expiration_month' => 'string',
        'pan_expiration_year' => 'string',
        'masked_cardholder_full_name' => 'string',
        'masked_cardholder_first_name' => 'string',
        'masked_cardholder_last_name' => 'string',
        'payment_card_descriptor' => 'string',
        'payment_card_type' => 'string',
        'digital_card_features' => '\MastercardApiClient\Model\DigitalCardFeature[]',
        'masked_billing_address' => '\MastercardApiClient\Model\MaskedAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'src_digital_card_id' => null,
        'pan_bin' => null,
        'pan_last_four' => null,
        'digital_card_data' => null,
        'pan_expiration_month' => null,
        'pan_expiration_year' => null,
        'masked_cardholder_full_name' => null,
        'masked_cardholder_first_name' => null,
        'masked_cardholder_last_name' => null,
        'payment_card_descriptor' => null,
        'payment_card_type' => null,
        'digital_card_features' => null,
        'masked_billing_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'src_digital_card_id' => false,
		'pan_bin' => false,
		'pan_last_four' => false,
		'digital_card_data' => false,
		'pan_expiration_month' => false,
		'pan_expiration_year' => false,
		'masked_cardholder_full_name' => false,
		'masked_cardholder_first_name' => false,
		'masked_cardholder_last_name' => false,
		'payment_card_descriptor' => false,
		'payment_card_type' => false,
		'digital_card_features' => false,
		'masked_billing_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'src_digital_card_id' => 'srcDigitalCardId',
        'pan_bin' => 'panBin',
        'pan_last_four' => 'panLastFour',
        'digital_card_data' => 'digitalCardData',
        'pan_expiration_month' => 'panExpirationMonth',
        'pan_expiration_year' => 'panExpirationYear',
        'masked_cardholder_full_name' => 'maskedCardholderFullName',
        'masked_cardholder_first_name' => 'maskedCardholderFirstName',
        'masked_cardholder_last_name' => 'maskedCardholderLastName',
        'payment_card_descriptor' => 'paymentCardDescriptor',
        'payment_card_type' => 'paymentCardType',
        'digital_card_features' => 'digitalCardFeatures',
        'masked_billing_address' => 'maskedBillingAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'src_digital_card_id' => 'setSrcDigitalCardId',
        'pan_bin' => 'setPanBin',
        'pan_last_four' => 'setPanLastFour',
        'digital_card_data' => 'setDigitalCardData',
        'pan_expiration_month' => 'setPanExpirationMonth',
        'pan_expiration_year' => 'setPanExpirationYear',
        'masked_cardholder_full_name' => 'setMaskedCardholderFullName',
        'masked_cardholder_first_name' => 'setMaskedCardholderFirstName',
        'masked_cardholder_last_name' => 'setMaskedCardholderLastName',
        'payment_card_descriptor' => 'setPaymentCardDescriptor',
        'payment_card_type' => 'setPaymentCardType',
        'digital_card_features' => 'setDigitalCardFeatures',
        'masked_billing_address' => 'setMaskedBillingAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'src_digital_card_id' => 'getSrcDigitalCardId',
        'pan_bin' => 'getPanBin',
        'pan_last_four' => 'getPanLastFour',
        'digital_card_data' => 'getDigitalCardData',
        'pan_expiration_month' => 'getPanExpirationMonth',
        'pan_expiration_year' => 'getPanExpirationYear',
        'masked_cardholder_full_name' => 'getMaskedCardholderFullName',
        'masked_cardholder_first_name' => 'getMaskedCardholderFirstName',
        'masked_cardholder_last_name' => 'getMaskedCardholderLastName',
        'payment_card_descriptor' => 'getPaymentCardDescriptor',
        'payment_card_type' => 'getPaymentCardType',
        'digital_card_features' => 'getDigitalCardFeatures',
        'masked_billing_address' => 'getMaskedBillingAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('src_digital_card_id', $data ?? [], null);
        $this->setIfExists('pan_bin', $data ?? [], null);
        $this->setIfExists('pan_last_four', $data ?? [], null);
        $this->setIfExists('digital_card_data', $data ?? [], null);
        $this->setIfExists('pan_expiration_month', $data ?? [], null);
        $this->setIfExists('pan_expiration_year', $data ?? [], null);
        $this->setIfExists('masked_cardholder_full_name', $data ?? [], null);
        $this->setIfExists('masked_cardholder_first_name', $data ?? [], null);
        $this->setIfExists('masked_cardholder_last_name', $data ?? [], null);
        $this->setIfExists('payment_card_descriptor', $data ?? [], null);
        $this->setIfExists('payment_card_type', $data ?? [], null);
        $this->setIfExists('digital_card_features', $data ?? [], null);
        $this->setIfExists('masked_billing_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['src_digital_card_id'] === null) {
            $invalidProperties[] = "'src_digital_card_id' can't be null";
        }
        if ((mb_strlen($this->container['src_digital_card_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'src_digital_card_id', the character length must be smaller than or equal to 36.";
        }

        if ($this->container['pan_bin'] === null) {
            $invalidProperties[] = "'pan_bin' can't be null";
        }
        if ($this->container['pan_last_four'] === null) {
            $invalidProperties[] = "'pan_last_four' can't be null";
        }
        if ((mb_strlen($this->container['pan_last_four']) > 4)) {
            $invalidProperties[] = "invalid value for 'pan_last_four', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['digital_card_data'] === null) {
            $invalidProperties[] = "'digital_card_data' can't be null";
        }
        if (!is_null($this->container['pan_expiration_month']) && (mb_strlen($this->container['pan_expiration_month']) > 2)) {
            $invalidProperties[] = "invalid value for 'pan_expiration_month', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['pan_expiration_year']) && (mb_strlen($this->container['pan_expiration_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'pan_expiration_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['masked_cardholder_full_name']) && (mb_strlen($this->container['masked_cardholder_full_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'masked_cardholder_full_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['masked_cardholder_first_name']) && (mb_strlen($this->container['masked_cardholder_first_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'masked_cardholder_first_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['masked_cardholder_last_name']) && (mb_strlen($this->container['masked_cardholder_last_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'masked_cardholder_last_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['payment_card_descriptor']) && (mb_strlen($this->container['payment_card_descriptor']) > 32)) {
            $invalidProperties[] = "invalid value for 'payment_card_descriptor', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['payment_card_type']) && (mb_strlen($this->container['payment_card_type']) > 32)) {
            $invalidProperties[] = "invalid value for 'payment_card_type', the character length must be smaller than or equal to 32.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets src_digital_card_id
     *
     * @return string
     */
    public function getSrcDigitalCardId()
    {
        return $this->container['src_digital_card_id'];
    }

    /**
     * Sets src_digital_card_id
     *
     * @param string $src_digital_card_id < Unique Identifier of the Card. Reference representing the PAN or Payment Token that enables a non-SRCPI entity to identify the underlying PAN. A single PAN can have one or more SRC Digital Card Reference Identifiers. Digital Card information can be accompanied with SRC Digital Card Reference Identifier. It is associated with the SRC Profile to which the Digital Card belongs and is unique within an SRC System.
     *
     * @return self
     */
    public function setSrcDigitalCardId($src_digital_card_id)
    {
        if (is_null($src_digital_card_id)) {
            throw new \InvalidArgumentException('non-nullable src_digital_card_id cannot be null');
        }
        if ((mb_strlen($src_digital_card_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $src_digital_card_id when calling CheckoutMaskedCard., must be smaller than or equal to 36.');
        }

        $this->container['src_digital_card_id'] = $src_digital_card_id;

        return $this;
    }

    /**
     * Gets pan_bin
     *
     * @return string
     */
    public function getPanBin()
    {
        return $this->container['pan_bin'];
    }

    /**
     * Sets pan_bin
     *
     * @param string $pan_bin First significant digits of the PAN included in an unmasked form.
     *
     * @return self
     */
    public function setPanBin($pan_bin)
    {
        if (is_null($pan_bin)) {
            throw new \InvalidArgumentException('non-nullable pan_bin cannot be null');
        }
        $this->container['pan_bin'] = $pan_bin;

        return $this;
    }

    /**
     * Gets pan_last_four
     *
     * @return string
     */
    public function getPanLastFour()
    {
        return $this->container['pan_last_four'];
    }

    /**
     * Sets pan_last_four
     *
     * @param string $pan_last_four Attribute of the Payment Card that represents the Last four digits of the PAN included in an unmasked form.
     *
     * @return self
     */
    public function setPanLastFour($pan_last_four)
    {
        if (is_null($pan_last_four)) {
            throw new \InvalidArgumentException('non-nullable pan_last_four cannot be null');
        }
        if ((mb_strlen($pan_last_four) > 4)) {
            throw new \InvalidArgumentException('invalid length for $pan_last_four when calling CheckoutMaskedCard., must be smaller than or equal to 4.');
        }

        $this->container['pan_last_four'] = $pan_last_four;

        return $this;
    }

    /**
     * Gets digital_card_data
     *
     * @return \MastercardApiClient\Model\CheckoutDigitalCardData
     */
    public function getDigitalCardData()
    {
        return $this->container['digital_card_data'];
    }

    /**
     * Sets digital_card_data
     *
     * @param \MastercardApiClient\Model\CheckoutDigitalCardData $digital_card_data digital_card_data
     *
     * @return self
     */
    public function setDigitalCardData($digital_card_data)
    {
        if (is_null($digital_card_data)) {
            throw new \InvalidArgumentException('non-nullable digital_card_data cannot be null');
        }
        $this->container['digital_card_data'] = $digital_card_data;

        return $this;
    }

    /**
     * Gets pan_expiration_month
     *
     * @return string|null
     */
    public function getPanExpirationMonth()
    {
        return $this->container['pan_expiration_month'];
    }

    /**
     * Sets pan_expiration_month
     *
     * @param string|null $pan_expiration_month Expiration month of the Payment Card expressed as a two-digit calendar month used for presentation purposes.
     *
     * @return self
     */
    public function setPanExpirationMonth($pan_expiration_month)
    {
        if (is_null($pan_expiration_month)) {
            throw new \InvalidArgumentException('non-nullable pan_expiration_month cannot be null');
        }
        if ((mb_strlen($pan_expiration_month) > 2)) {
            throw new \InvalidArgumentException('invalid length for $pan_expiration_month when calling CheckoutMaskedCard., must be smaller than or equal to 2.');
        }

        $this->container['pan_expiration_month'] = $pan_expiration_month;

        return $this;
    }

    /**
     * Gets pan_expiration_year
     *
     * @return string|null
     */
    public function getPanExpirationYear()
    {
        return $this->container['pan_expiration_year'];
    }

    /**
     * Sets pan_expiration_year
     *
     * @param string|null $pan_expiration_year Expiration year of the Payment Card expressed as four-digit calendar year, used for presentation purposes.
     *
     * @return self
     */
    public function setPanExpirationYear($pan_expiration_year)
    {
        if (is_null($pan_expiration_year)) {
            throw new \InvalidArgumentException('non-nullable pan_expiration_year cannot be null');
        }
        if ((mb_strlen($pan_expiration_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $pan_expiration_year when calling CheckoutMaskedCard., must be smaller than or equal to 4.');
        }

        $this->container['pan_expiration_year'] = $pan_expiration_year;

        return $this;
    }

    /**
     * Gets masked_cardholder_full_name
     *
     * @return string|null
     */
    public function getMaskedCardholderFullName()
    {
        return $this->container['masked_cardholder_full_name'];
    }

    /**
     * Sets masked_cardholder_full_name
     *
     * @param string|null $masked_cardholder_full_name Masked cardholder Full Name.
     *
     * @return self
     */
    public function setMaskedCardholderFullName($masked_cardholder_full_name)
    {
        if (is_null($masked_cardholder_full_name)) {
            throw new \InvalidArgumentException('non-nullable masked_cardholder_full_name cannot be null');
        }
        if ((mb_strlen($masked_cardholder_full_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $masked_cardholder_full_name when calling CheckoutMaskedCard., must be smaller than or equal to 60.');
        }

        $this->container['masked_cardholder_full_name'] = $masked_cardholder_full_name;

        return $this;
    }

    /**
     * Gets masked_cardholder_first_name
     *
     * @return string|null
     */
    public function getMaskedCardholderFirstName()
    {
        return $this->container['masked_cardholder_first_name'];
    }

    /**
     * Sets masked_cardholder_first_name
     *
     * @param string|null $masked_cardholder_first_name Masked cardholder First Name.
     *
     * @return self
     */
    public function setMaskedCardholderFirstName($masked_cardholder_first_name)
    {
        if (is_null($masked_cardholder_first_name)) {
            throw new \InvalidArgumentException('non-nullable masked_cardholder_first_name cannot be null');
        }
        if ((mb_strlen($masked_cardholder_first_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $masked_cardholder_first_name when calling CheckoutMaskedCard., must be smaller than or equal to 30.');
        }

        $this->container['masked_cardholder_first_name'] = $masked_cardholder_first_name;

        return $this;
    }

    /**
     * Gets masked_cardholder_last_name
     *
     * @return string|null
     */
    public function getMaskedCardholderLastName()
    {
        return $this->container['masked_cardholder_last_name'];
    }

    /**
     * Sets masked_cardholder_last_name
     *
     * @param string|null $masked_cardholder_last_name Masked cardholder Last Name.
     *
     * @return self
     */
    public function setMaskedCardholderLastName($masked_cardholder_last_name)
    {
        if (is_null($masked_cardholder_last_name)) {
            throw new \InvalidArgumentException('non-nullable masked_cardholder_last_name cannot be null');
        }
        if ((mb_strlen($masked_cardholder_last_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $masked_cardholder_last_name when calling CheckoutMaskedCard., must be smaller than or equal to 30.');
        }

        $this->container['masked_cardholder_last_name'] = $masked_cardholder_last_name;

        return $this;
    }

    /**
     * Gets payment_card_descriptor
     *
     * @return string|null
     */
    public function getPaymentCardDescriptor()
    {
        return $this->container['payment_card_descriptor'];
    }

    /**
     * Sets payment_card_descriptor
     *
     * @param string|null $payment_card_descriptor Conveys the card brand, and will be a free-form string, to be defined within an SRC Programme.
     *
     * @return self
     */
    public function setPaymentCardDescriptor($payment_card_descriptor)
    {
        if (is_null($payment_card_descriptor)) {
            throw new \InvalidArgumentException('non-nullable payment_card_descriptor cannot be null');
        }
        if ((mb_strlen($payment_card_descriptor) > 32)) {
            throw new \InvalidArgumentException('invalid length for $payment_card_descriptor when calling CheckoutMaskedCard., must be smaller than or equal to 32.');
        }

        $this->container['payment_card_descriptor'] = $payment_card_descriptor;

        return $this;
    }

    /**
     * Gets payment_card_type
     *
     * @return string|null
     */
    public function getPaymentCardType()
    {
        return $this->container['payment_card_type'];
    }

    /**
     * Sets payment_card_type
     *
     * @param string|null $payment_card_type Conveys the card type. For example:CREDIT, DEBIT, PREPAID, COMBO, FLEX. Note:COMBO and FLEX for applicable regions only.
     *
     * @return self
     */
    public function setPaymentCardType($payment_card_type)
    {
        if (is_null($payment_card_type)) {
            throw new \InvalidArgumentException('non-nullable payment_card_type cannot be null');
        }
        if ((mb_strlen($payment_card_type) > 32)) {
            throw new \InvalidArgumentException('invalid length for $payment_card_type when calling CheckoutMaskedCard., must be smaller than or equal to 32.');
        }

        $this->container['payment_card_type'] = $payment_card_type;

        return $this;
    }

    /**
     * Gets digital_card_features
     *
     * @return \MastercardApiClient\Model\DigitalCardFeature[]|null
     */
    public function getDigitalCardFeatures()
    {
        return $this->container['digital_card_features'];
    }

    /**
     * Sets digital_card_features
     *
     * @param \MastercardApiClient\Model\DigitalCardFeature[]|null $digital_card_features Card benefits associated with a Digital Card to be presented to the Consumer at the time of checkout.
     *
     * @return self
     */
    public function setDigitalCardFeatures($digital_card_features)
    {
        if (is_null($digital_card_features)) {
            throw new \InvalidArgumentException('non-nullable digital_card_features cannot be null');
        }
        $this->container['digital_card_features'] = $digital_card_features;

        return $this;
    }

    /**
     * Gets masked_billing_address
     *
     * @return \MastercardApiClient\Model\MaskedAddress|null
     */
    public function getMaskedBillingAddress()
    {
        return $this->container['masked_billing_address'];
    }

    /**
     * Sets masked_billing_address
     *
     * @param \MastercardApiClient\Model\MaskedAddress|null $masked_billing_address masked_billing_address
     *
     * @return self
     */
    public function setMaskedBillingAddress($masked_billing_address)
    {
        if (is_null($masked_billing_address)) {
            throw new \InvalidArgumentException('non-nullable masked_billing_address cannot be null');
        }
        $this->container['masked_billing_address'] = $masked_billing_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


