<?php
/**
 * DpaData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Srci Client Onboarding Orch Service API
 *
 * Mastercard Commerce System:  API definitions for Client Onboarding Orch Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * DpaData Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DpaData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DpaData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'dpa_name' => 'string',
        'dpa_presentation_name' => 'string',
        'dpa_uri' => 'string',
        'origin_domains' => 'string[]',
        'dpa_address' => '\MastercardApiClient\Model\DpaAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'dpa_name' => null,
        'dpa_presentation_name' => null,
        'dpa_uri' => null,
        'origin_domains' => null,
        'dpa_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'dpa_name' => false,
		'dpa_presentation_name' => false,
		'dpa_uri' => false,
		'origin_domains' => false,
		'dpa_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dpa_name' => 'dpaName',
        'dpa_presentation_name' => 'dpaPresentationName',
        'dpa_uri' => 'dpaUri',
        'origin_domains' => 'originDomains',
        'dpa_address' => 'dpaAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dpa_name' => 'setDpaName',
        'dpa_presentation_name' => 'setDpaPresentationName',
        'dpa_uri' => 'setDpaUri',
        'origin_domains' => 'setOriginDomains',
        'dpa_address' => 'setDpaAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dpa_name' => 'getDpaName',
        'dpa_presentation_name' => 'getDpaPresentationName',
        'dpa_uri' => 'getDpaUri',
        'origin_domains' => 'getOriginDomains',
        'dpa_address' => 'getDpaAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('dpa_name', $data ?? [], null);
        $this->setIfExists('dpa_presentation_name', $data ?? [], null);
        $this->setIfExists('dpa_uri', $data ?? [], null);
        $this->setIfExists('origin_domains', $data ?? [], null);
        $this->setIfExists('dpa_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['dpa_name'] === null) {
            $invalidProperties[] = "'dpa_name' can't be null";
        }
        if ((mb_strlen($this->container['dpa_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'dpa_name', the character length must be smaller than or equal to 60.";
        }

        if ((mb_strlen($this->container['dpa_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'dpa_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dpa_presentation_name']) && (mb_strlen($this->container['dpa_presentation_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'dpa_presentation_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['dpa_presentation_name']) && (mb_strlen($this->container['dpa_presentation_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'dpa_presentation_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['dpa_uri'] === null) {
            $invalidProperties[] = "'dpa_uri' can't be null";
        }
        if ((mb_strlen($this->container['dpa_uri']) > 100)) {
            $invalidProperties[] = "invalid value for 'dpa_uri', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['dpa_uri']) < 1)) {
            $invalidProperties[] = "invalid value for 'dpa_uri', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['origin_domains']) && (count($this->container['origin_domains']) > 10)) {
            $invalidProperties[] = "invalid value for 'origin_domains', number of items must be less than or equal to 10.";
        }

        if (!is_null($this->container['origin_domains']) && (count($this->container['origin_domains']) < 0)) {
            $invalidProperties[] = "invalid value for 'origin_domains', number of items must be greater than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dpa_name
     *
     * @return string
     */
    public function getDpaName()
    {
        return $this->container['dpa_name'];
    }

    /**
     * Sets dpa_name
     *
     * @param string $dpa_name Legal name of registered DPA.
     *
     * @return self
     */
    public function setDpaName($dpa_name)
    {
        if (is_null($dpa_name)) {
            throw new \InvalidArgumentException('non-nullable dpa_name cannot be null');
        }
        if ((mb_strlen($dpa_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $dpa_name when calling DpaData., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($dpa_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dpa_name when calling DpaData., must be bigger than or equal to 1.');
        }

        $this->container['dpa_name'] = $dpa_name;

        return $this;
    }

    /**
     * Gets dpa_presentation_name
     *
     * @return string|null
     */
    public function getDpaPresentationName()
    {
        return $this->container['dpa_presentation_name'];
    }

    /**
     * Sets dpa_presentation_name
     *
     * @param string|null $dpa_presentation_name Merchant company name associated with the DPA to be used for presentation purposes within the user experience.
     *
     * @return self
     */
    public function setDpaPresentationName($dpa_presentation_name)
    {
        if (is_null($dpa_presentation_name)) {
            throw new \InvalidArgumentException('non-nullable dpa_presentation_name cannot be null');
        }
        if ((mb_strlen($dpa_presentation_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $dpa_presentation_name when calling DpaData., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($dpa_presentation_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dpa_presentation_name when calling DpaData., must be bigger than or equal to 1.');
        }

        $this->container['dpa_presentation_name'] = $dpa_presentation_name;

        return $this;
    }

    /**
     * Gets dpa_uri
     *
     * @return string
     */
    public function getDpaUri()
    {
        return $this->container['dpa_uri'];
    }

    /**
     * Sets dpa_uri
     *
     * @param string $dpa_uri Dpa uri
     *
     * @return self
     */
    public function setDpaUri($dpa_uri)
    {
        if (is_null($dpa_uri)) {
            throw new \InvalidArgumentException('non-nullable dpa_uri cannot be null');
        }
        if ((mb_strlen($dpa_uri) > 100)) {
            throw new \InvalidArgumentException('invalid length for $dpa_uri when calling DpaData., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($dpa_uri) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dpa_uri when calling DpaData., must be bigger than or equal to 1.');
        }

        $this->container['dpa_uri'] = $dpa_uri;

        return $this;
    }

    /**
     * Gets origin_domains
     *
     * @return string[]|null
     */
    public function getOriginDomains()
    {
        return $this->container['origin_domains'];
    }

    /**
     * Sets origin_domains
     *
     * @param string[]|null $origin_domains Website or URL where the payment experience is placed on the checkout page.
     *
     * @return self
     */
    public function setOriginDomains($origin_domains)
    {
        if (is_null($origin_domains)) {
            throw new \InvalidArgumentException('non-nullable origin_domains cannot be null');
        }

        if ((count($origin_domains) > 10)) {
            throw new \InvalidArgumentException('invalid value for $origin_domains when calling DpaData., number of items must be less than or equal to 10.');
        }
        if ((count($origin_domains) < 0)) {
            throw new \InvalidArgumentException('invalid length for $origin_domains when calling DpaData., number of items must be greater than or equal to 0.');
        }
        $this->container['origin_domains'] = $origin_domains;

        return $this;
    }

    /**
     * Gets dpa_address
     *
     * @return \MastercardApiClient\Model\DpaAddress|null
     */
    public function getDpaAddress()
    {
        return $this->container['dpa_address'];
    }

    /**
     * Sets dpa_address
     *
     * @param \MastercardApiClient\Model\DpaAddress|null $dpa_address dpa_address
     *
     * @return self
     */
    public function setDpaAddress($dpa_address)
    {
        if (is_null($dpa_address)) {
            throw new \InvalidArgumentException('non-nullable dpa_address cannot be null');
        }
        $this->container['dpa_address'] = $dpa_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


