<?php
/**
 * DigitalCardData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * DigitalCardData Class Doc Comment
 *
 * @category Class
 * @description Contains digital card information that is used in the user interface to provide reference to the actual PAN or Payment Token without actually disclosing either. Digital Card Data is grouped based on the following    * PAN Authorisation Digital Card Information: data used in Request and Response Messages   * UI/UX Presentation Data: data used user interfaces to provide the user with a recognisable descriptor   * Digital Card Art: image that accompanies Digital Card information for user interface purposes
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DigitalCardData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DigitalCardData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'presentation_name' => 'string',
        'descriptor_name' => 'string',
        'art_uri' => 'string',
        'co_brand_name' => 'string',
        'is_co_branded' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'presentation_name' => null,
        'descriptor_name' => null,
        'art_uri' => null,
        'co_brand_name' => null,
        'is_co_branded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'presentation_name' => false,
		'descriptor_name' => false,
		'art_uri' => false,
		'co_brand_name' => false,
		'is_co_branded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'presentation_name' => 'presentationName',
        'descriptor_name' => 'descriptorName',
        'art_uri' => 'artUri',
        'co_brand_name' => 'coBrandName',
        'is_co_branded' => 'isCoBranded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'presentation_name' => 'setPresentationName',
        'descriptor_name' => 'setDescriptorName',
        'art_uri' => 'setArtUri',
        'co_brand_name' => 'setCoBrandName',
        'is_co_branded' => 'setIsCoBranded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'presentation_name' => 'getPresentationName',
        'descriptor_name' => 'getDescriptorName',
        'art_uri' => 'getArtUri',
        'co_brand_name' => 'getCoBrandName',
        'is_co_branded' => 'getIsCoBranded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('presentation_name', $data ?? [], null);
        $this->setIfExists('descriptor_name', $data ?? [], null);
        $this->setIfExists('art_uri', $data ?? [], null);
        $this->setIfExists('co_brand_name', $data ?? [], null);
        $this->setIfExists('is_co_branded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['descriptor_name'] === null) {
            $invalidProperties[] = "'descriptor_name' can't be null";
        }
        if ((mb_strlen($this->container['descriptor_name']) > 64)) {
            $invalidProperties[] = "invalid value for 'descriptor_name', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['art_uri'] === null) {
            $invalidProperties[] = "'art_uri' can't be null";
        }
        if ((mb_strlen($this->container['art_uri']) > 1024)) {
            $invalidProperties[] = "invalid value for 'art_uri', the character length must be smaller than or equal to 1024.";
        }

        if (!is_null($this->container['co_brand_name']) && (mb_strlen($this->container['co_brand_name']) > 128)) {
            $invalidProperties[] = "invalid value for 'co_brand_name', the character length must be smaller than or equal to 128.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets presentation_name
     *
     * @return string|null
     */
    public function getPresentationName()
    {
        return $this->container['presentation_name'];
    }

    /**
     * Sets presentation_name
     *
     * @param string|null $presentation_name Presentation text created by the Consumer to enable recognition of the PAN entered into the DCF. This value is unique to the DCF and defined by the Consumer. (e.g. Nickname).
     *
     * @return self
     */
    public function setPresentationName($presentation_name)
    {
        if (is_null($presentation_name)) {
            throw new \InvalidArgumentException('non-nullable presentation_name cannot be null');
        }
        $this->container['presentation_name'] = $presentation_name;

        return $this;
    }

    /**
     * Gets descriptor_name
     *
     * @return string
     */
    public function getDescriptorName()
    {
        return $this->container['descriptor_name'];
    }

    /**
     * Sets descriptor_name
     *
     * @param string $descriptor_name Presentation text defined by the SRC Programme that describes the PAN presented as a Digital Card. This descriptor is the same across all DCFs.
     *
     * @return self
     */
    public function setDescriptorName($descriptor_name)
    {
        if (is_null($descriptor_name)) {
            throw new \InvalidArgumentException('non-nullable descriptor_name cannot be null');
        }
        if ((mb_strlen($descriptor_name) > 64)) {
            throw new \InvalidArgumentException('invalid length for $descriptor_name when calling DigitalCardData., must be smaller than or equal to 64.');
        }

        $this->container['descriptor_name'] = $descriptor_name;

        return $this;
    }

    /**
     * Gets art_uri
     *
     * @return string
     */
    public function getArtUri()
    {
        return $this->container['art_uri'];
    }

    /**
     * Sets art_uri
     *
     * @param string $art_uri URI that locates the Card Art image to be used for presentation purposes. Should be provided by an Issuer.
     *
     * @return self
     */
    public function setArtUri($art_uri)
    {
        if (is_null($art_uri)) {
            throw new \InvalidArgumentException('non-nullable art_uri cannot be null');
        }
        if ((mb_strlen($art_uri) > 1024)) {
            throw new \InvalidArgumentException('invalid length for $art_uri when calling DigitalCardData., must be smaller than or equal to 1024.');
        }

        $this->container['art_uri'] = $art_uri;

        return $this;
    }

    /**
     * Gets co_brand_name
     *
     * @return string|null
     */
    public function getCoBrandName()
    {
        return $this->container['co_brand_name'];
    }

    /**
     * Sets co_brand_name
     *
     * @param string|null $co_brand_name Textual name of the co- brand partner. Available for MA only.
     *
     * @return self
     */
    public function setCoBrandName($co_brand_name)
    {
        if (is_null($co_brand_name)) {
            throw new \InvalidArgumentException('non-nullable co_brand_name cannot be null');
        }
        if ((mb_strlen($co_brand_name) > 128)) {
            throw new \InvalidArgumentException('invalid length for $co_brand_name when calling DigitalCardData., must be smaller than or equal to 128.');
        }

        $this->container['co_brand_name'] = $co_brand_name;

        return $this;
    }

    /**
     * Gets is_co_branded
     *
     * @return bool|null
     */
    public function getIsCoBranded()
    {
        return $this->container['is_co_branded'];
    }

    /**
     * Sets is_co_branded
     *
     * @param bool|null $is_co_branded Indicates whether the product is co-branded. Available for MA only.
     *
     * @return self
     */
    public function setIsCoBranded($is_co_branded)
    {
        if (is_null($is_co_branded)) {
            throw new \InvalidArgumentException('non-nullable is_co_branded cannot be null');
        }
        $this->container['is_co_branded'] = $is_co_branded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


