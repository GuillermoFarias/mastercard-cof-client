<?php
/**
 * VerificationData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * VerificationData Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VerificationData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VerificationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'verification_type' => '\MastercardApiClient\Model\VerificationType',
        'verification_entity' => 'string',
        'verification_method' => 'string',
        'verification_results' => 'string',
        'verification_timestamp' => 'string',
        'additional_data' => 'string',
        'verification_events' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'verification_type' => null,
        'verification_entity' => null,
        'verification_method' => null,
        'verification_results' => null,
        'verification_timestamp' => null,
        'additional_data' => null,
        'verification_events' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'verification_type' => false,
		'verification_entity' => false,
		'verification_method' => false,
		'verification_results' => false,
		'verification_timestamp' => false,
		'additional_data' => false,
		'verification_events' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'verification_type' => 'verificationType',
        'verification_entity' => 'verificationEntity',
        'verification_method' => 'verificationMethod',
        'verification_results' => 'verificationResults',
        'verification_timestamp' => 'verificationTimestamp',
        'additional_data' => 'additionalData',
        'verification_events' => 'verificationEvents'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'verification_type' => 'setVerificationType',
        'verification_entity' => 'setVerificationEntity',
        'verification_method' => 'setVerificationMethod',
        'verification_results' => 'setVerificationResults',
        'verification_timestamp' => 'setVerificationTimestamp',
        'additional_data' => 'setAdditionalData',
        'verification_events' => 'setVerificationEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'verification_type' => 'getVerificationType',
        'verification_entity' => 'getVerificationEntity',
        'verification_method' => 'getVerificationMethod',
        'verification_results' => 'getVerificationResults',
        'verification_timestamp' => 'getVerificationTimestamp',
        'additional_data' => 'getAdditionalData',
        'verification_events' => 'getVerificationEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('verification_type', $data ?? [], null);
        $this->setIfExists('verification_entity', $data ?? [], null);
        $this->setIfExists('verification_method', $data ?? [], null);
        $this->setIfExists('verification_results', $data ?? [], null);
        $this->setIfExists('verification_timestamp', $data ?? [], null);
        $this->setIfExists('additional_data', $data ?? [], null);
        $this->setIfExists('verification_events', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['verification_type'] === null) {
            $invalidProperties[] = "'verification_type' can't be null";
        }
        if ($this->container['verification_entity'] === null) {
            $invalidProperties[] = "'verification_entity' can't be null";
        }
        if ((mb_strlen($this->container['verification_entity']) > 64)) {
            $invalidProperties[] = "invalid value for 'verification_entity', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['verification_method'] === null) {
            $invalidProperties[] = "'verification_method' can't be null";
        }
        if ((mb_strlen($this->container['verification_method']) > 64)) {
            $invalidProperties[] = "invalid value for 'verification_method', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['verification_results'] === null) {
            $invalidProperties[] = "'verification_results' can't be null";
        }
        if ((mb_strlen($this->container['verification_results']) > 64)) {
            $invalidProperties[] = "invalid value for 'verification_results', the character length must be smaller than or equal to 64.";
        }

        if ($this->container['verification_timestamp'] === null) {
            $invalidProperties[] = "'verification_timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets verification_type
     *
     * @return \MastercardApiClient\Model\VerificationType
     */
    public function getVerificationType()
    {
        return $this->container['verification_type'];
    }

    /**
     * Sets verification_type
     *
     * @param \MastercardApiClient\Model\VerificationType $verification_type verification_type
     *
     * @return self
     */
    public function setVerificationType($verification_type)
    {
        if (is_null($verification_type)) {
            throw new \InvalidArgumentException('non-nullable verification_type cannot be null');
        }
        $this->container['verification_type'] = $verification_type;

        return $this;
    }

    /**
     * Gets verification_entity
     *
     * @return string
     */
    public function getVerificationEntity()
    {
        return $this->container['verification_entity'];
    }

    /**
     * Sets verification_entity
     *
     * @param string $verification_entity Entity performing the verification.
     *
     * @return self
     */
    public function setVerificationEntity($verification_entity)
    {
        if (is_null($verification_entity)) {
            throw new \InvalidArgumentException('non-nullable verification_entity cannot be null');
        }
        if ((mb_strlen($verification_entity) > 64)) {
            throw new \InvalidArgumentException('invalid length for $verification_entity when calling VerificationData., must be smaller than or equal to 64.');
        }

        $this->container['verification_entity'] = $verification_entity;

        return $this;
    }

    /**
     * Gets verification_method
     *
     * @return string
     */
    public function getVerificationMethod()
    {
        return $this->container['verification_method'];
    }

    /**
     * Sets verification_method
     *
     * @param string $verification_method Method of the verification
     *
     * @return self
     */
    public function setVerificationMethod($verification_method)
    {
        if (is_null($verification_method)) {
            throw new \InvalidArgumentException('non-nullable verification_method cannot be null');
        }
        if ((mb_strlen($verification_method) > 64)) {
            throw new \InvalidArgumentException('invalid length for $verification_method when calling VerificationData., must be smaller than or equal to 64.');
        }

        $this->container['verification_method'] = $verification_method;

        return $this;
    }

    /**
     * Gets verification_results
     *
     * @return string
     */
    public function getVerificationResults()
    {
        return $this->container['verification_results'];
    }

    /**
     * Sets verification_results
     *
     * @param string $verification_results Result of the verification.
     *
     * @return self
     */
    public function setVerificationResults($verification_results)
    {
        if (is_null($verification_results)) {
            throw new \InvalidArgumentException('non-nullable verification_results cannot be null');
        }
        if ((mb_strlen($verification_results) > 64)) {
            throw new \InvalidArgumentException('invalid length for $verification_results when calling VerificationData., must be smaller than or equal to 64.');
        }

        $this->container['verification_results'] = $verification_results;

        return $this;
    }

    /**
     * Gets verification_timestamp
     *
     * @return string
     */
    public function getVerificationTimestamp()
    {
        return $this->container['verification_timestamp'];
    }

    /**
     * Sets verification_timestamp
     *
     * @param string $verification_timestamp Date and time when the verification was conducted. UTC time in Unix epoch format
     *
     * @return self
     */
    public function setVerificationTimestamp($verification_timestamp)
    {
        if (is_null($verification_timestamp)) {
            throw new \InvalidArgumentException('non-nullable verification_timestamp cannot be null');
        }
        $this->container['verification_timestamp'] = $verification_timestamp;

        return $this;
    }

    /**
     * Gets additional_data
     *
     * @return string|null
     */
    public function getAdditionalData()
    {
        return $this->container['additional_data'];
    }

    /**
     * Sets additional_data
     *
     * @param string|null $additional_data Data related to the verification performed.
     *
     * @return self
     */
    public function setAdditionalData($additional_data)
    {
        if (is_null($additional_data)) {
            throw new \InvalidArgumentException('non-nullable additional_data cannot be null');
        }
        $this->container['additional_data'] = $additional_data;

        return $this;
    }

    /**
     * Gets verification_events
     *
     * @return string[]|null
     */
    public function getVerificationEvents()
    {
        return $this->container['verification_events'];
    }

    /**
     * Sets verification_events
     *
     * @param string[]|null $verification_events Authentication reason
     *
     * @return self
     */
    public function setVerificationEvents($verification_events)
    {
        if (is_null($verification_events)) {
            throw new \InvalidArgumentException('non-nullable verification_events cannot be null');
        }
        $this->container['verification_events'] = $verification_events;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


