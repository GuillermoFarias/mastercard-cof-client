<?php
/**
 * Dpa
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Srci Client Onboarding Orch Service API
 *
 * Mastercard Commerce System:  API definitions for Client Onboarding Orch Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Model;

use \ArrayAccess;
use \MastercardApiClient\ObjectSerializer;

/**
 * Dpa Class Doc Comment
 *
 * @category Class
 * @description An array of objects to contain DPA registration details.
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Dpa implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Dpa';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supported_card_brands' => 'string[]',
        'dpa_data' => '\MastercardApiClient\Model\DpaData',
        'debit_token_requested' => 'bool',
        'merchant_country_code' => 'string',
        'merchant_category_codes' => 'string[]',
        'supported_checkout_types' => 'string[]',
        'three_ds_defaultdata' => '\MastercardApiClient\Model\ThreeDSDefaultData',
        'acquirer_data' => '\MastercardApiClient\Model\AcquirerData[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supported_card_brands' => null,
        'dpa_data' => null,
        'debit_token_requested' => null,
        'merchant_country_code' => null,
        'merchant_category_codes' => null,
        'supported_checkout_types' => null,
        'three_ds_defaultdata' => null,
        'acquirer_data' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supported_card_brands' => false,
		'dpa_data' => false,
		'debit_token_requested' => false,
		'merchant_country_code' => false,
		'merchant_category_codes' => false,
		'supported_checkout_types' => false,
		'three_ds_defaultdata' => false,
		'acquirer_data' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supported_card_brands' => 'supportedCardBrands',
        'dpa_data' => 'dpaData',
        'debit_token_requested' => 'debitTokenRequested',
        'merchant_country_code' => 'merchantCountryCode',
        'merchant_category_codes' => 'merchantCategoryCodes',
        'supported_checkout_types' => 'supportedCheckoutTypes',
        'three_ds_defaultdata' => 'threeDSDefaultdata',
        'acquirer_data' => 'acquirerData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supported_card_brands' => 'setSupportedCardBrands',
        'dpa_data' => 'setDpaData',
        'debit_token_requested' => 'setDebitTokenRequested',
        'merchant_country_code' => 'setMerchantCountryCode',
        'merchant_category_codes' => 'setMerchantCategoryCodes',
        'supported_checkout_types' => 'setSupportedCheckoutTypes',
        'three_ds_defaultdata' => 'setThreeDsDefaultdata',
        'acquirer_data' => 'setAcquirerData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supported_card_brands' => 'getSupportedCardBrands',
        'dpa_data' => 'getDpaData',
        'debit_token_requested' => 'getDebitTokenRequested',
        'merchant_country_code' => 'getMerchantCountryCode',
        'merchant_category_codes' => 'getMerchantCategoryCodes',
        'supported_checkout_types' => 'getSupportedCheckoutTypes',
        'three_ds_defaultdata' => 'getThreeDsDefaultdata',
        'acquirer_data' => 'getAcquirerData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supported_card_brands', $data ?? [], null);
        $this->setIfExists('dpa_data', $data ?? [], null);
        $this->setIfExists('debit_token_requested', $data ?? [], null);
        $this->setIfExists('merchant_country_code', $data ?? [], null);
        $this->setIfExists('merchant_category_codes', $data ?? [], null);
        $this->setIfExists('supported_checkout_types', $data ?? [], null);
        $this->setIfExists('three_ds_defaultdata', $data ?? [], null);
        $this->setIfExists('acquirer_data', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supported_card_brands'] === null) {
            $invalidProperties[] = "'supported_card_brands' can't be null";
        }
        if ((count($this->container['supported_card_brands']) > 4)) {
            $invalidProperties[] = "invalid value for 'supported_card_brands', number of items must be less than or equal to 4.";
        }

        if ((count($this->container['supported_card_brands']) < 1)) {
            $invalidProperties[] = "invalid value for 'supported_card_brands', number of items must be greater than or equal to 1.";
        }

        if ($this->container['dpa_data'] === null) {
            $invalidProperties[] = "'dpa_data' can't be null";
        }
        if ($this->container['merchant_country_code'] === null) {
            $invalidProperties[] = "'merchant_country_code' can't be null";
        }
        if ((mb_strlen($this->container['merchant_country_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'merchant_country_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['merchant_category_codes']) && (count($this->container['merchant_category_codes']) > 200)) {
            $invalidProperties[] = "invalid value for 'merchant_category_codes', number of items must be less than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supported_card_brands
     *
     * @return string[]
     */
    public function getSupportedCardBrands()
    {
        return $this->container['supported_card_brands'];
    }

    /**
     * Sets supported_card_brands
     *
     * @param string[] $supported_card_brands Card networks that are supported for DPA registration. For example, MASTERCARD, VISA.
     *
     * @return self
     */
    public function setSupportedCardBrands($supported_card_brands)
    {
        if (is_null($supported_card_brands)) {
            throw new \InvalidArgumentException('non-nullable supported_card_brands cannot be null');
        }

        if ((count($supported_card_brands) > 4)) {
            throw new \InvalidArgumentException('invalid value for $supported_card_brands when calling Dpa., number of items must be less than or equal to 4.');
        }
        if ((count($supported_card_brands) < 1)) {
            throw new \InvalidArgumentException('invalid length for $supported_card_brands when calling Dpa., number of items must be greater than or equal to 1.');
        }
        $this->container['supported_card_brands'] = $supported_card_brands;

        return $this;
    }

    /**
     * Gets dpa_data
     *
     * @return \MastercardApiClient\Model\DpaData
     */
    public function getDpaData()
    {
        return $this->container['dpa_data'];
    }

    /**
     * Sets dpa_data
     *
     * @param \MastercardApiClient\Model\DpaData $dpa_data dpa_data
     *
     * @return self
     */
    public function setDpaData($dpa_data)
    {
        if (is_null($dpa_data)) {
            throw new \InvalidArgumentException('non-nullable dpa_data cannot be null');
        }
        $this->container['dpa_data'] = $dpa_data;

        return $this;
    }

    /**
     * Gets debit_token_requested
     *
     * @return bool|null
     */
    public function getDebitTokenRequested()
    {
        return $this->container['debit_token_requested'];
    }

    /**
     * Sets debit_token_requested
     *
     * @param bool|null $debit_token_requested Applicable only for US country, default value: true
     *
     * @return self
     */
    public function setDebitTokenRequested($debit_token_requested)
    {
        if (is_null($debit_token_requested)) {
            throw new \InvalidArgumentException('non-nullable debit_token_requested cannot be null');
        }
        $this->container['debit_token_requested'] = $debit_token_requested;

        return $this;
    }

    /**
     * Gets merchant_country_code
     *
     * @return string
     */
    public function getMerchantCountryCode()
    {
        return $this->container['merchant_country_code'];
    }

    /**
     * Sets merchant_country_code
     *
     * @param string $merchant_country_code Country code for the registering merchant in ISO format. It is also required for the phone number field.
     *
     * @return self
     */
    public function setMerchantCountryCode($merchant_country_code)
    {
        if (is_null($merchant_country_code)) {
            throw new \InvalidArgumentException('non-nullable merchant_country_code cannot be null');
        }
        if ((mb_strlen($merchant_country_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $merchant_country_code when calling Dpa., must be smaller than or equal to 2.');
        }

        $this->container['merchant_country_code'] = $merchant_country_code;

        return $this;
    }

    /**
     * Gets merchant_category_codes
     *
     * @return string[]|null
     */
    public function getMerchantCategoryCodes()
    {
        return $this->container['merchant_category_codes'];
    }

    /**
     * Sets merchant_category_codes
     *
     * @param string[]|null $merchant_category_codes The category code describing the merchant's business, service, or product, as assigned to them by Mastercard.
     *
     * @return self
     */
    public function setMerchantCategoryCodes($merchant_category_codes)
    {
        if (is_null($merchant_category_codes)) {
            throw new \InvalidArgumentException('non-nullable merchant_category_codes cannot be null');
        }

        if ((count($merchant_category_codes) > 200)) {
            throw new \InvalidArgumentException('invalid value for $merchant_category_codes when calling Dpa., number of items must be less than or equal to 200.');
        }
        $this->container['merchant_category_codes'] = $merchant_category_codes;

        return $this;
    }

    /**
     * Gets supported_checkout_types
     *
     * @return string[]|null
     */
    public function getSupportedCheckoutTypes()
    {
        return $this->container['supported_checkout_types'];
    }

    /**
     * Sets supported_checkout_types
     *
     * @param string[]|null $supported_checkout_types Supported checkout types,these include - CLICK_TO_PAY, GUEST_CHECKOUT_TOKENIZATION, CARD_ON_FILE_TOKENIZATION.
     *
     * @return self
     */
    public function setSupportedCheckoutTypes($supported_checkout_types)
    {
        if (is_null($supported_checkout_types)) {
            throw new \InvalidArgumentException('non-nullable supported_checkout_types cannot be null');
        }
        $this->container['supported_checkout_types'] = $supported_checkout_types;

        return $this;
    }

    /**
     * Gets three_ds_defaultdata
     *
     * @return \MastercardApiClient\Model\ThreeDSDefaultData|null
     */
    public function getThreeDsDefaultdata()
    {
        return $this->container['three_ds_defaultdata'];
    }

    /**
     * Sets three_ds_defaultdata
     *
     * @param \MastercardApiClient\Model\ThreeDSDefaultData|null $three_ds_defaultdata three_ds_defaultdata
     *
     * @return self
     */
    public function setThreeDsDefaultdata($three_ds_defaultdata)
    {
        if (is_null($three_ds_defaultdata)) {
            throw new \InvalidArgumentException('non-nullable three_ds_defaultdata cannot be null');
        }
        $this->container['three_ds_defaultdata'] = $three_ds_defaultdata;

        return $this;
    }

    /**
     * Gets acquirer_data
     *
     * @return \MastercardApiClient\Model\AcquirerData[]|null
     */
    public function getAcquirerData()
    {
        return $this->container['acquirer_data'];
    }

    /**
     * Sets acquirer_data
     *
     * @param \MastercardApiClient\Model\AcquirerData[]|null $acquirer_data acquirer_data
     *
     * @return self
     */
    public function setAcquirerData($acquirer_data)
    {
        if (is_null($acquirer_data)) {
            throw new \InvalidArgumentException('non-nullable acquirer_data cannot be null');
        }
        $this->container['acquirer_data'] = $acquirer_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


