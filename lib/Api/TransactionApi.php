<?php
/**
 * TransactionApi
 * PHP version 7.4
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Checkout, Save Card On File, Delete Saved Card On File And Confirmations API
 *
 * Click to Pay checkout used by Merchants to receive payload data from the Click to Pay System and send the results of transaction authorisation back to the Click to Pay System. Endpoints are available to retrieve payload data and send the outcome of a payment or checkout.  The signing of the request is as per the process documented at [https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol](https://developer.mastercard.com/support-article/what-authentication-requirements-are-there-to-use-the-raw-rest-protocol)  The signing process and calcualtion of body hash follows draft given by Google and documented at [https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html](https://tools.ietf.org/id/draft-eaton-oauth-bodyhash-00.html)
 *
 * The version of the OpenAPI document: 1.3.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MastercardApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MastercardApiClient\ApiException;
use MastercardApiClient\Configuration;
use MastercardApiClient\HeaderSelector;
use MastercardApiClient\ObjectSerializer;

/**
 * TransactionApi Class Doc Comment
 *
 * @category Class
 * @package  MastercardApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'postConfirmation' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation postConfirmation
     *
     * Send results of payment authorization to Unified Checkout Solutions.
     *
     * @param  string $x_openapi_clientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body. (required)
     * @param  \MastercardApiClient\Model\PostbackConfirmationRequest $postback_confirmation_request postback_confirmation_request (required)
     * @param  string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. (optional)
     * @param  string $x_src_cx_flow_id The X-SRC-CX-FLOW-ID helps in routing and session affinity. Usage of X-SRC-CX-FLOW-ID in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-SRC-CX-FLOW-ID, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-SRC-CX-FLOW-ID in your request or if the field is empty, the Click to Pay system generates one and responds with the X-SRC-CX-FLOW-ID in the header. The X-SRC-CX-FLOW-ID returned in the response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postConfirmation'] to see the possible values for this operation
     *
     * @throws \MastercardApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postConfirmation($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id = null, $x_src_cx_flow_id = null, string $contentType = self::contentTypes['postConfirmation'][0])
    {
        $this->postConfirmationWithHttpInfo($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id, $x_src_cx_flow_id, $contentType);
    }

    /**
     * Operation postConfirmationWithHttpInfo
     *
     * Send results of payment authorization to Unified Checkout Solutions.
     *
     * @param  string $x_openapi_clientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body. (required)
     * @param  \MastercardApiClient\Model\PostbackConfirmationRequest $postback_confirmation_request (required)
     * @param  string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. (optional)
     * @param  string $x_src_cx_flow_id The X-SRC-CX-FLOW-ID helps in routing and session affinity. Usage of X-SRC-CX-FLOW-ID in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-SRC-CX-FLOW-ID, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-SRC-CX-FLOW-ID in your request or if the field is empty, the Click to Pay system generates one and responds with the X-SRC-CX-FLOW-ID in the header. The X-SRC-CX-FLOW-ID returned in the response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postConfirmation'] to see the possible values for this operation
     *
     * @throws \MastercardApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postConfirmationWithHttpInfo($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id = null, $x_src_cx_flow_id = null, string $contentType = self::contentTypes['postConfirmation'][0])
    {
        $request = $this->postConfirmationRequest($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id, $x_src_cx_flow_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MastercardApiClient\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MastercardApiClient\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MastercardApiClient\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MastercardApiClient\Model\Errors',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postConfirmationAsync
     *
     * Send results of payment authorization to Unified Checkout Solutions.
     *
     * @param  string $x_openapi_clientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body. (required)
     * @param  \MastercardApiClient\Model\PostbackConfirmationRequest $postback_confirmation_request (required)
     * @param  string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. (optional)
     * @param  string $x_src_cx_flow_id The X-SRC-CX-FLOW-ID helps in routing and session affinity. Usage of X-SRC-CX-FLOW-ID in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-SRC-CX-FLOW-ID, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-SRC-CX-FLOW-ID in your request or if the field is empty, the Click to Pay system generates one and responds with the X-SRC-CX-FLOW-ID in the header. The X-SRC-CX-FLOW-ID returned in the response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfirmationAsync($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id = null, $x_src_cx_flow_id = null, string $contentType = self::contentTypes['postConfirmation'][0])
    {
        return $this->postConfirmationAsyncWithHttpInfo($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id, $x_src_cx_flow_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postConfirmationAsyncWithHttpInfo
     *
     * Send results of payment authorization to Unified Checkout Solutions.
     *
     * @param  string $x_openapi_clientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body. (required)
     * @param  \MastercardApiClient\Model\PostbackConfirmationRequest $postback_confirmation_request (required)
     * @param  string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. (optional)
     * @param  string $x_src_cx_flow_id The X-SRC-CX-FLOW-ID helps in routing and session affinity. Usage of X-SRC-CX-FLOW-ID in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-SRC-CX-FLOW-ID, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-SRC-CX-FLOW-ID in your request or if the field is empty, the Click to Pay system generates one and responds with the X-SRC-CX-FLOW-ID in the header. The X-SRC-CX-FLOW-ID returned in the response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postConfirmationAsyncWithHttpInfo($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id = null, $x_src_cx_flow_id = null, string $contentType = self::contentTypes['postConfirmation'][0])
    {
        $returnType = '';
        $request = $this->postConfirmationRequest($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id, $x_src_cx_flow_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postConfirmation'
     *
     * @param  string $x_openapi_clientid Open API key to make the server to server call to Mastercard SRCI. This ID is provided to the client during the onboarding process to make OAuth1.0 based signed requests. The value MUST match the SRC Client ID present in the request body. (required)
     * @param  \MastercardApiClient\Model\PostbackConfirmationRequest $postback_confirmation_request (required)
     * @param  string $merchant_transaction_id Merchant Checkout Transaction Identifier which is returned in the checkoutResponse to either checkoutWithCard or checkoutWithNewCard JavaScript methods and links the client-side JavaScript calls and server-side API calls for a specific transaction. Optional for Subsequent Payment or Subsequent Split Shipment. (optional)
     * @param  string $x_src_cx_flow_id The X-SRC-CX-FLOW-ID helps in routing and session affinity. Usage of X-SRC-CX-FLOW-ID in requests ensures requests by the same client are directed to the same server. When you make your initial API call, use the X-SRC-CX-FLOW-ID, returned in one of the client-side calls checkoutWithNewCard() or checkoutWitCard(). If you do not send X-SRC-CX-FLOW-ID in your request or if the field is empty, the Click to Pay system generates one and responds with the X-SRC-CX-FLOW-ID in the header. The X-SRC-CX-FLOW-ID returned in the response can be used in the subsequent calls to ensure these calls are directed to the same server that returned the initial response. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['postConfirmation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postConfirmationRequest($x_openapi_clientid, $postback_confirmation_request, $merchant_transaction_id = null, $x_src_cx_flow_id = null, string $contentType = self::contentTypes['postConfirmation'][0])
    {

        // verify the required parameter 'x_openapi_clientid' is set
        if ($x_openapi_clientid === null || (is_array($x_openapi_clientid) && count($x_openapi_clientid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_openapi_clientid when calling postConfirmation'
            );
        }

        // verify the required parameter 'postback_confirmation_request' is set
        if ($postback_confirmation_request === null || (is_array($postback_confirmation_request) && count($postback_confirmation_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $postback_confirmation_request when calling postConfirmation'
            );
        }




        $resourcePath = '/checkout/confirmations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_openapi_clientid !== null) {
            $headerParams['x-openapi-clientid'] = ObjectSerializer::toHeaderValue($x_openapi_clientid);
        }
        // header params
        if ($merchant_transaction_id !== null) {
            $headerParams['merchant-transaction-id'] = ObjectSerializer::toHeaderValue($merchant_transaction_id);
        }
        // header params
        if ($x_src_cx_flow_id !== null) {
            $headerParams['x-src-cx-flow-id'] = ObjectSerializer::toHeaderValue($x_src_cx_flow_id);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($postback_confirmation_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($postback_confirmation_request));
            } else {
                $httpBody = $postback_confirmation_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
